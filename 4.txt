#include<stdio.h> 
#include<conio.h> 
#include<string.h> 
int k=0,z=0,i=0,j=0,c=0; 
char a[16],ac[20],stk[15],act[10]; 
void check(); 
void main() 
{ 
puts("GRAMMAR is E->E+E \n E->E*E \n E->(E) \n E->id"); 
puts("enter input string "); 
gets(a); 
c=strlen(a); 
strcpy(act,"SHIFT->"); 
puts("stack \t input \t action"); 
for(k=0,i=0; j<c; k++,i++,j++) 
{ 
if(a[j]=='i' && a[j+1]=='d') 
{ 
stk[i]=a[j]; 
stk[i+1]=a[j+1]; 
stk[i+2]='\0'; 
a[j]=' '; 
a[j+1]=' '; 
printf("\n$%s\t%s$\t%sid",stk,a,act); 
check(); 
} 
else
{ 
stk[i]=a[j]; 
stk[i+1]='\0'; 
a[j]=' '; 
printf("\n$%s\t%s$\t%ssymbols",stk,a,act); 
check(); 
} 
} 
getch(); 
} 
void check() 
{ 
strcpy(ac,"REDUCE TO E"); 
for(z=0; z<c; z++) 
if(stk[z]=='i' && stk[z+1]=='d') 
{ 
stk[z]='E'; 
stk[z+1]='\0'; 
printf("\n$%s\t%s$\t%s",stk,a,ac); 
j++; 
} 
for(z=0; z<c; z++) 
if(stk[z]=='E' && stk[z+1]=='+' && stk[z+2]=='E') 
{ 
stk[z]='E'; 
stk[z+1]='\0'; 
stk[z+2]='\0'; 
printf("\n$%s\t%s$\t%s",stk,a,ac); 
i=i-2; 
} 
for(z=0; z<c; z++) 
if(stk[z]=='E' && stk[z+1]=='*' && stk[z+2]=='E') 
{ 
stk[z]='E'; 
stk[z+1]='\0'; 
stk[z+1]='\0'; 
printf("\n$%s\t%s$\t%s",stk,a,ac); 
i=i-2; 
} 
for(z=0; z<c; z++) 
if(stk[z]=='(' && stk[z+1]=='E' && stk[z+2]==')') 
{ 
stk[z]='E'; 
stk[z+1]='\0'; 
stk[z+1]='\0';
printf("\n$%s\t%s$\t%s",stk,a,ac); 
i=i-2; 
} 
} 


%{
	#include<stdio.h>
%}
%token ID DIG LB RB SUB MUL DIV ADD
%left SUB ADD
%left DIV MUL
%%
START: VALID {printf("\nValid Expression.\n"); exit(0);}
           | error {printf("\nInvalid Expression.\n"); exit(0);}
           ;
VALID: E
           ;
         E: E ADD T
           | E SUB T
           | T
           ;
         T: T MUL F
           | T DIV F
           | F
           ;
         F: ID
           | DIG
           | LB E RB
           ;
%%
main()
{
	system("clear");
	printf("Enter an Arithmetic Expression:\n");
	yyparse();
}
yyerror()
{}








Supporting Lex Program:

%{
	#include"y.tab.h"
%}
%%
[0-9]+   	             {return DIG;}
[a-zA-Z]+[a-zA-Z0-9]* {return ID;}
[(]                   		{return LB;}
[)]                   		{return RB;}
[\-]                  		{return SUB;}
[\*]                  		{return MUL;}
[/]                   		{return DIV;}
[+]                   		{return ADD;}
%%
yywrap()
{}

Execution:

[root@cse1bldea ssw]# lex 4a.lex
[root@cse1bldea ssw]# yacc -d 4a.yacc
[root@cse1bldea ssw]# cc y.tab.c lex.yy.c
[root@cse1bldea ssw]# ./a.out


